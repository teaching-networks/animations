{
	"title": "Animations",
	"overview": "Overview",
	"packet-transmission.name": "Packet Transmission",
	"languageSelectionLabel": "Select language",
	"moreAnimationsComing": "More animations coming",
	"munichUniversityName": "Munich University of Applied Sciences",
	"copyright": "Copyright",
	"description": "Description",
	"settings": "Settings",
	"back": "Back",
	"fullscreen": "Fullscreen",
	"packetTransmission.start": "Start",
	"packetTransmission.reset": "Reset",
	"packetTransmission.sender": "Sender",
	"packetTransmission.receiver": "Receiver",
	"packetTransmission.propagationSpeed": "Propagation speed",
	"packetTransmission.length": "Line length",
	"packetTransmission.size": "Packet size",
	"packetTransmission.rate": "Rate",
	"packetTransmission.description": "This simple animation illustrates one of the most fundamental concepts in computer networking: transmission delay versus propagation delay. Although this concept is discussed in detail in Chapter 1, an interactive animation speaks a thousand words. You set the length of the link, the packet size, and the transmission speed; the applet shows the packet being sent from sender to receiver. Note that for many combinations, the head of the packet reaches the receiver before transmission is finished at the sender.",
	"reliable-transmission-animation.name": "Reliable transmission",
	"reliable-transmission-animation.sender": "Sender",
	"reliable-transmission-animation.receiver": "Receiver",
	"reliable-transmission-animation.send-next-packet": "Send packet",
	"reliable-transmission-animation.protocol.stop-and-wait": "Stop-And-Wait",
	"reliable-transmission-animation.protocol.stop-and-wait.description": "Stop-And-Wait is the simplest ARQ protocol (Automatic Repeat Request). It is a protocol used for reliable transmission over a unreliable channel (IP layer) where only one packet is sent at a time. Once the receiver receives the packet it sends an answer packet (ACK packet) back to the sender. Once the sender receives the ACK packet, the next packet is sent. In case the sender does not receive the ACK packet in a reasonable time (Timeout) the last sent packet is sent again. Thus a reliable transmission is ensured, although it is pretty slow because it is waiting all the time rather than sending packets.",
	"reliable-transmission-animation.protocol.selective-repeat": "Selective Repeat",
	"reliable-transmission-animation.protocol.selective-repeat.description": "In comparison to the Go-Back-N protocol, the Selective-Repeat protocol needs a lot more memory because it has two windows both for the sender and receiver, where packets are cached. In case packets are received by the receiver out-of-order the packets are not dismissed but rather cached until the prior packets are received and then handed over to the next upper layer in-order. To make this work every slot in the window of the sender needs a own timer to determine what packet needs to be resend. By doing this we are able to achieve a high sending rate but need to invest in more memory. In case of a connection with a lot of missing/distorted packets we would rather use selective repeat than Go-Back-N because we only need to send the missing packets.",
	"reliable-transmission-animation.protocol.go-back-n": "Go-Back-N",
	"reliable-transmission-animation.protocol.go-back-n.description": "The Go-Back-N protocol is a another protocol for reliable transmission over a unreliable channel (network layer). In contrast to the Stop-And-Wait protocol a sender window is established at the sender. As long as the sender window is not full, the sender is allowed to send packets to the receiver. When an ACK is send from the receiver and received by the sender, the window is moved further. Every ACK is acknowledging all previously received packets (cumulative ACKs). In case a packet is not received by the receiver an ACK is sent acknowledging the last in order received packet. After a timeout happened at the sender all not yet acknowledged packets are resend. Thus you will get a significant higher sending rate than with the Stop-And-Wait protocol, although a lot of packets need to be retransmitted in case a timeout occurs because the receiver does not cache out-of-order packets.",
	"reliable-transmission-animation.transmission-duration": "Transmission duration",
	"reliable-transmission-animation.window-size": "Window size",
	"reliable-transmission-animation.protocol-messages": "Protocol log",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.send-packet": "Sender sends PKT_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet": "Sender resends PKT_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-packet": "Receiver received PKT_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet": "Receiver received PKT_%i which has already been received",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack": "Sender received ACK_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup": "Sender received ACK_%i which has already been received"
}