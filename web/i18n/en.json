{
	"title": "Animations",
	"overview": "Overview",
	"packet-transmission.name": "Packet Transmission",
	"languageSelectionLabel": "Select language",
	"moreAnimationsComing": "More animations coming",
	"munichUniversityName": "Munich University of Applied Sciences",
	"copyright": "Copyright",
	"description": "Description",
	"settings": "Settings",
	"back": "Back",
	"fullscreen": "Fullscreen",
	"packetTransmission.start": "Start",
	"packetTransmission.reset": "Reset",
	"packetTransmission.sender": "Sender",
	"packetTransmission.receiver": "Receiver",
	"packetTransmission.propagationSpeed": "Propagation speed",
	"packetTransmission.length": "Line length",
	"packetTransmission.size": "Packet size",
	"packetTransmission.rate": "Rate",
	"packetTransmission.description": "This simple animation illustrates one of the most fundamental concepts in computer networking: transmission delay versus propagation delay. Although this concept is discussed in detail in Chapter 1, an interactive animation speaks a thousand words. You set the length of the link, the packet size, and the transmission speed; the applet shows the packet being sent from sender to receiver. Note that for many combinations, the head of the packet reaches the receiver before transmission is finished at the sender.",
	"reliable-transmission-animation.name": "Reliable transmission",
	"reliable-transmission-animation.sender": "Sender",
	"reliable-transmission-animation.receiver": "Receiver",
	"reliable-transmission-animation.send-next-packet": "Send packet",
	"reliable-transmission-animation.timer": "Timer",
	"reliable-transmission-animation.enable-custom-timer": "Custom timer?",
	"reliable-transmission-animation.protocol.stop-and-wait": "Stop-And-Wait",
	"reliable-transmission-animation.protocol.stop-and-wait.description": "Stop-And-Wait is the simplest ARQ protocol (Automatic Repeat Request). It is a protocol used for reliable transmission over a unreliable channel where only one packet is sent at a time. Once the receiver receives the packet it sends an acknowledgement packet (ACK packet) back to the sender. Once the sender receives the ACK packet, the next packet is sent. In case the sender does not receive the ACK packet in a reasonable time, a timeout occurs, the sender assumes that the packet was lost and sends it again. In this way, a reliable transmission is ensured.",
	"reliable-transmission-animation.protocol.selective-repeat": "Selective Repeat",
	"reliable-transmission-animation.protocol.selective-repeat.description": "In comparison to the Go-Back-N protocol, the Selective-Repeat protocol needs more memory because it has two windows both for the sender and receiver, where packets are cached. In case packets are received by the receiver out-of-order, the packets are not discarded but rather cached until the prior packets are received and then handed over to the next upper layer in-order. To make this work, every slot in the window of the sender needs a timer to determine what packet needs to be resent. By doing this, we are able to achieve a high sending rate but need to invest in more memory compared to GBN or send-and-wait. In case of a connection with a lot of missing/distorted packets, we would rather use selective repeat than Go-Back-N because we only need to retransmit the corrupted or lost packets.",
	"reliable-transmission-animation.protocol.go-back-n": "Go-Back-N",
	"reliable-transmission-animation.protocol.go-back-n.description": "The Go-Back-N protocol is a another protocol for reliable transmission over a unreliable channel. In contrast to the Stop-And-Wait protocol, a sender window potentially holding more than one packet is established at the sender. As long as the sender window is not full, the sender is allowed to send packets to the receiver. When an ACK is send by the receiver and received by the sender, the window is moved further. Every ACK is acknowledging all previously received packets (cumulative ACKs). In case a packet with a higher sequence number than expected is received, an ACK is sent acknowledging the last in order received packet and the packet is discarded. After a timeout at the sender, all not yet acknowledged packets are resent. Thus GBN often can achieve a significantly higher sending rate than the Stop-And-Wait protocol, although a lot of packets need to be retransmitted in case a timeout occurs because the receiver does not cache out-of-order packets.",
	"reliable-transmission-animation.transmission-duration": "Transmission duration",
	"reliable-transmission-animation.window-size": "Window size",
	"reliable-transmission-animation.protocol-messages": "Protocol log",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.send-packet": "Sender sends PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet.1": "Sender sends PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet.2": " again",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-packet": "Receiver received PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet.1": "Receiver received PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet.2": " which has already been received",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack": "Sender received ACK_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup.1": "Sender received ACK_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup.2": " which has already been received",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.retransmitt.1": "Sender retransmitts ",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.retransmitt.2": " outstanding packets after timeout",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-out-of-order.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-out-of-order.2": " received out of order. Sending cumulative ACK",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-in-order.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-in-order.2": " received in order. Sending ACK",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.reset-timeout.1": "Reset timeout for PKT_",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.reset-timeout.2": " because sender received ACK",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt-dup.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt-dup.2": " has already been received. Resending ACK",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt.2": " has been received. Sending ACK",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack-dup.1": "Sender received ACK_",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack-dup.2": " which has already been received",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack": "Sender received ACK_",
	"queue-simulation-animation.name": "Queue simulation",
	"queue-simulation-animation.packet-per-second": "packets / s",
	"queue-simulation-animation.emission-rate": "Emission rate",
	"queue-simulation-animation.transmission-rate": "Transmission rate",
	"queue-simulation-animation.queue-length": "Queue length",
	"queue-simulation-animation.description": "Processing a packet in a router consumes time. This is called the queueing delay. Since the router cannot control the amount and frequency of incoming packets it needs some kind of buffer where the packets will be kept until the router is able to process them: The routers queue. In case the queue is full, arriving packets will be dropped.",
	"queue-simulation-animation.incoming": "Incoming",
	"queue-simulation-animation.outgoing": "Outgoing",
	"queue-simulation-animation.queue-of-router": "Queue of Router",
	"queue-simulation-animation.dropped-packets": "Dropped packets",
	"queue-simulation-animation.time-passed": "Time passed"
}
