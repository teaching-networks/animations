{
  "version": "Application version",
  "contact": "Contact us",
  "imprint-info": "Information regarding privacy and imprint can be found on the main page of the",
  "title": "Animations",
  "overview": "Overview",
  "user-management": "User",
  "group-management": "Groups",
  "animation-management": "Animations",
  "languageSelectionLabel": "Select language",
  "moreAnimationsComing": "More animations coming",
  "munichUniversityName": "Munich University of Applied Sciences",
  "copyright": "Copyright",
  "description": "Description",
  "settings": "Settings",
  "back": "Back",
  "cancel": "Cancel",
  "create": "Create",
  "update": "Update",
  "ok": "OK",
  "goto-animation": "See animation",
  "fullscreen": "Fullscreen",
  "logged-in-as": "Logged in as",
  "animation-not-visible": "This animation is currently not visible.",
  "animation-error": "An error occurred while trying to show the animation. Please try again later.",
  "group-list.title": "Groups",
  "group-list.error": "Groups could not be loaded",
  "group-list.no-groups-available": "Currently there are no groups available",
  "animation-list.title": "Animations",
  "animation-list.error": "Animations could not be loaded",
  "animation-list.no-animations-available": "Currently there are no animations available",
  "login.title": "Login",
  "login.subtitle": "... for administration",
  "login.error": "Login using the provided credentials failed.",
  "login.close": "Close",
  "login.submit": "Login",
  "login.username": "Username",
  "login.password": "Password",
  "user-management.title": "User management",
  "user-management.add-user": "Add user",
  "user-management.no-users": "There are no users yet. Try creating one!",
  "user-management.create-user": "Create user",
  "user-management.edit-user": "Edit user",
  "user-management.error-message": "An error occurred",
  "user-management.user-dialog-error-message": "An error occurred",
  "user-management.not-changed": "(unchanged)",
  "management-component.error": "Error",
  "management-component.save": "Save",
  "management-component.saved": "Saved!",
  "management-component.delete": "Delete",
  "management-component.deleted": "Deleted!",
  "management-component.empty-name": "(empty)",
  "management-component.menu.actions": "Actions",
  "management-component.menu.create": "New",
  "management-component.menu.items": "Items",
  "management-component.error-loading": "An error occurred while loading items",
  "management-component.placeholder": "Please select an item to the left",
  "group-management.title": "Group management",
  "group-management.new-group": "New group",
  "group-management.group-name": "Name",
  "group-management.animations-to-display": "Animations to display",
  "animation-management.title": "Animation management",
  "animation-management.editor.headline": "Edit animation",
  "animation-management.editor.title": "Title",
  "animation-management.editor.url": "URL",
  "animation-management.editor.short-description": "Short description",
  "animation-management.editor.description": "Description",
  "animation-management.editor.reset-to-default": "Reset to defaults",
  "packetTransmission.start": "Start",
  "packetTransmission.reset": "Reset",
  "packetTransmission.sender": "Sender",
  "packetTransmission.receiver": "Receiver",
  "packetTransmission.propagationSpeed": "Propagation speed",
  "packetTransmission.length": "Line length",
  "packetTransmission.size": "Packet size",
  "packetTransmission.rate": "Rate",
  "packetTransmission.name": "Packet Transmission",
  "packetTransmission.short-description": "Propagation and transmission delay during data transfer",
  "packetTransmission.description": "This simple animation illustrates two basic characteristics in computer networking: transmission delay versus propagation delay. Although this concept is discussed in detail in Chapter 1 of the lecture, a picture (or animation) is worth a thousand words. You set the length of the link, the packet size, and the transmission speed; the animation shows the packet being sent from sender to receiver. Note that for many combinations, the head of the packet reaches the receiver before transmission is finished at the sender.",
  "packetTransmission.credits": "This animation was inspired by a Java Applet originally developed by David Grangier, Institut Eurecom, France. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Java Applet author(s) for making their Java Applet publicly available.",
  "reliable-transmission-animation.name": "Reliable transmission",
  "reliable-transmission-animation.short-description": "Test",
  "reliable-transmission-animation.sender": "Sender",
  "reliable-transmission-animation.receiver": "Receiver",
  "reliable-transmission-animation.send-next-packet": "Send packet",
  "reliable-transmission-animation.timer": "Timer",
  "reliable-transmission-animation.enable-custom-timer": "Custom timer?",
  "reliable-transmission-animation.protocol.stop-and-wait.name": "Stop-And-Wait",
  "reliable-transmission-animation.protocol.stop-and-wait.short-description": "Protocol for reliable transmission",
  "reliable-transmission-animation.protocol.stop-and-wait.description": "Stop-And-Wait is the simplest ARQ protocol (Automatic Repeat Request). It is a protocol used for reliable transmission over a unreliable channel where only one packet is sent at a time. Once the receiver receives the packet it sends an acknowledgement packet (ACK packet) back to the sender. Once the sender receives the ACK packet, the next packet is sent. In case the sender does not receive the ACK packet in a reasonable time, a timeout occurs, the sender assumes that the packet was lost and sends it again. In this way, a reliable transmission is ensured.",
  "reliable-transmission-animation.protocol.selective-repeat.name": "Selective Repeat",
  "reliable-transmission-animation.protocol.selective-repeat.short-description": "Protocol for reliable transmission",
  "reliable-transmission-animation.protocol.selective-repeat.description": "In comparison to the Go-Back-N protocol, the Selective-Repeat protocol needs more memory because it has two windows both for the sender and receiver, where packets are cached. In case packets are received by the receiver out-of-order, the packets are not discarded but rather cached until the prior packets are received and then handed over to the next upper layer in-order. To make this work, every slot in the window of the sender needs a timer to determine what packet needs to be resent. By doing this, we are able to achieve a high sending rate but need to invest in more memory compared to GBN or send-and-wait. In case of a connection with a lot of missing/distorted packets, we would rather use selective repeat than Go-Back-N because we only need to retransmit the corrupted or lost packets.",
  "reliable-transmission-animation.protocol.go-back-n.name": "Go-Back-N",
  "reliable-transmission-animation.protocol.go-back-n.short-description": "Protocol for reliable transmission",
  "reliable-transmission-animation.protocol.go-back-n.cumulative-ack": "Cumulative ACK",
  "reliable-transmission-animation.protocol.specific-settings": "Protocol specific settings",
  "reliable-transmission-animation.protocol.go-back-n.description": "The Go-Back-N protocol is a another protocol for reliable transmission over a unreliable channel. In contrast to the Stop-And-Wait protocol, a sender window potentially holding more than one packet is established at the sender. As long as the sender window is not full, the sender is allowed to send packets to the receiver. When an ACK is send by the receiver and received by the sender, the window is moved further. Every ACK is acknowledging all previously received packets (cumulative ACKs). In case a packet with a higher sequence number than expected is received, an ACK is sent acknowledging the last in order received packet and the packet is discarded. After a timeout at the sender, all not yet acknowledged packets are resent. Thus GBN often can achieve a significantly higher sending rate than the Stop-And-Wait protocol, although a lot of packets need to be retransmitted in case a timeout occurs because the receiver does not cache out-of-order packets.",
  "reliable-transmission-animation.transmission-duration": "Transmission duration",
  "reliable-transmission-animation.window-size": "Window size",
  "reliable-transmission-animation.protocol-messages": "Protocol log",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.send-packet": "Sender sends PKT_",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet.1": "Sender sends PKT_",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet.2": " again",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-packet": "Receiver received PKT_",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet.1": "Receiver received PKT_",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet.2": " which has already been received",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack": "Sender received ACK_",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup.1": "Sender received ACK_",
  "reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup.2": " which has already been received",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.retransmitt.1": "Sender retransmitts ",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.retransmitt.2": " outstanding packets after timeout",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.received-out-of-order.1": "PKT_",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.received-out-of-order.2": " received out of order. Sending cumulative ACK",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.received-in-order.1": "PKT_",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.received-in-order.2": " received in order. Sending ACK",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.reset-timeout.1": "Reset timeout for PKT_",
  "reliable-transmission-animation.protocol.log-messages.go-back-n.reset-timeout.2": " because sender received ACK",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt-dup.1": "PKT_",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt-dup.2": " has already been received. Resending ACK",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt.1": "PKT_",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt.2": " has been received. Sending ACK",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack-dup.1": "Sender received ACK_",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack-dup.2": " which has already been received",
  "reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack": "Sender received ACK_",
  "reliable-transmission-animation.credits": "This animation was inspired by a Java Applet originally developed by M. Shatley & C. Hoffman (advisor: Prof. P. Amer), Univ. of Delaware. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Java Applet author(s) for making their Java Applet publicly available.",
  "queue-simulation-animation.name": "Queue simulation",
  "queue-simulation-animation.short-description": "Simulation of a router and its queue - Shows the impact of stress situations",
  "queue-simulation-animation.packet-per-second": "packets / s",
  "queue-simulation-animation.emission-rate": "Emission rate",
  "queue-simulation-animation.transmission-rate": "Transmission rate",
  "queue-simulation-animation.queue-length": "Queue length",
  "queue-simulation-animation.description": "A packet is processed in a router (e.g. the headers are evaluated and modified, if necessary) and then forwarded on one of the ports. The times required for this are called processing delay and transmission delay. The router cannot control the rate at which packets are received. As a result, it may not be able to process an incoming packet immediately because it is still processing a previous packet. It therefore requires a queue in which packages can be temporarily stored. This waiting time in the queue is the so-called queueing delay. If the queue is full, incoming packets are discarded - this is allowed because the Internet works according to the best effort principle.",
  "queue-simulation-animation.incoming": "Incoming",
  "queue-simulation-animation.outgoing": "Outgoing",
  "queue-simulation-animation.queue-of-router": "Queue of Router",
  "queue-simulation-animation.dropped-packets": "Dropped packets",
  "queue-simulation-animation.time-passed": "Time passed",
  "queue-simulation-animation.credits": "This animation was inspired by a Java Applet originally developed by David Grangier, Institut Eurecom, France. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Java Applet author(s) for making their Java Applet publicly available.",
  "http-delay-animation.name": "Http delay",
  "http-delay-animation.short-description": "Delays which happen when dealing with the HTTP protocol",
  "http-delay-animation.connection-step.0": "TCP connection establishment",
  "http-delay-animation.connection-step.1": "HTML page request",
  "http-delay-animation.connection-step.2": "Object request",
  "http-delay-animation.description": "This is an illustration for HTTP delays, especially when requesting a website (like this one!) with your browser. You can set the number of objects transmitted, the number of parallel connections whether the connections are persistent and if pipelining should be used.",
  "http-delay-animation.info": "Adjust the settings and click \"Start\" to start the animation",
  "http-delay-animation.persistent-connection": "Persistent connection",
  "http-delay-animation.pipelining": "Pipelining",
  "http-delay-animation.objects-being-transmitted": "Objects being transmitted",
  "http-delay-animation.parallel-connections": "Parallel connections",
  "http-delay-animation.transmission-delay": "Transmission delay",
  "http-delay-animation.enable-animation": "Enable animation",
  "http-delay-animation.animation-speed": "Animation speed (Total delay)",
  "http-delay-animation.start": "Start",
  "http-delay-animation.rtt-help": "Round trip time of the animation after you clicked \"Start\"",
  "http-delay-animation.credits": "This animation was inspired by a Java Applet originally developed by Pratima Akkunoor/Martin Reisslein, Arizona State University, USA. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Java Applet author(s) for making their Java Applet publicly available.",
  "dns-animation.name": "DNS lookup",
  "dns-animation.short-description": "Examples of recursive and iterative DNS queries",
  "dns-animation.description": "This animation shows a sequence of a simple DNS query for the IP address of the domain name \"hm.edu\". There are two kinds of DNS querys: iterative and recursive. When dealing with iterative DNS querys the originating DNS server is taking the active part of the name resolution. Each queried DNS server just answers with the next DNS server to ask. With recursive querys each next DNS server is instead trying to fully resolve the queried IP address (Only if the DNS servers support recursive queries). At the end of the animation a request to the resolved IP address is shown.",
  "dns-animation.credits": "This animation was inspired by a Java Applet originally developed by Beshan Kulapala/Martin Reisslein, Arizona State University, USA. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Applet author(s) for making their Java Applet publicly available.",
  "dns-animation.dns-query-type.recursive": "Recursive",
  "dns-animation.dns-query-type.iterative": "Iterative",
  "dns-animation.scenario.root-has-destination-cached": "ROOT server has the destination IP address cached.",
  "dns-animation.scenario.root-has-intermediate-cached": "ROOT server has the intermediate DNS server cached.",
  "dns-animation.scenario.root-has-authoritative-cached": "ROOT server has the authoritative DNS server cached.",
  "dns-animation.scenario.local-has-destination-cached": "Local DNS server hat the destination IP address cached.",
  "dns-animation.controls.scenario.label": "Scenario",
  "dns-animation.controls.dns-query-type.label": "DNS Query Type",
  "dns-animation.controls.root-dns-server.label": "ROOT DNS Server",
  "dns-animation.controls.start": "Start",
  "dns-animation.controls.query-type.root-dns-server": "ROOT DNS",
  "dns-animation.controls.query-type.local-dns-server": "Local DNS",
  "dns-animation.legend.query": "DNS Query",
  "dns-animation.legend.response": "DNS Response",
  "dns-animation.legend.request": "Request to the resolved IP address",
  "tcp-flow-control-animation.name": "TCP Flow Control",
  "tcp-flow-control-animation.short-description": "Illustration of the TCP flow control mechanism",
  "tcp-flow-control-animation.description": "This animation visualizes the TCP flow control mechanism. The sender sends packets to the receiver which it will buffer until it is ready to read them. As long as the buffer is full the receiver is advertising the sender a window size of 0. The sender is checking again by sending a packet with size 1 until the receivers buffer window will be > 0.",
  "tcp-flow-control-animation.credits": "This animation was inspired by a Java Applet originally developed by Hyojin Kim, Univ. of Pennsylvania/Rodrigo Neri, Park Univ., Missouri. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Applet author(s) for making their Java Applet publicly available.",
  "tcp-flow-control-animation.control.file-size": "File size",
  "tcp-flow-control-animation.control.buffer-size": "Buffer size",
  "tcp-flow-control-animation.control.speed": "Animation speed",
  "tcp-flow-control-animation.control.start": "Start",
  "tcp-flow-control-animation.data": "DATA",
  "tcp-flow-control-animation.buffer": "BUFFER",
  "tcp-congestion-control-animation.name": "TCP Congestion Control",
  "tcp-congestion-control-animation.short-description": "How TCP handles congestion with multiple TCP workstations",
  "tcp-congestion-control-animation.description": "The above graph is the TCP fairness graph. It shows the congestion windows for each TCP workstation competing for bandwidth (the red line) calculated by TCP congestion algorithms TCP Tahoe and Reno. Total congestion window for all workstations is visualized by the green area.",
  "tcp-congestion-control-animation.credits": "This animation was inspired by a Java Applet originally developed by M. Lahuis, N. Oldersma (adv: J.Bredek), Hanzehogescl Groningen, NL. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Applet author(s) for making their Java Applet publicly available.",
  "tcp-congestion-control-animation.control.bandwidth.label": "Bandwidth",
  "tcp-congestion-control-animation.control.pause.tooltip": "Pause / Unpause",
  "tcp-congestion-control-animation.control.add-workstation.tooltip": "Add workstation",
  "tcp-congestion-control-animation.control.remove-workstation.tooltip": "Remove workstation",
  "tcp-congestion-control-animation.control.workstation.label": "Workstation",
  "tcp-congestion-control-animation.control.workstation.3acks": "3 ACKs",
  "tcp-congestion-control-animation.control.workstation.3acks.tooltip": "Simulate 3 duplicate ACK packets on the workstation",
  "tcp-congestion-control-animation.control.workstation.timeout": "Timeout",
  "tcp-congestion-control-animation.control.workstation.timeout.tooltip": "Simulate a timeout on the workstation",
  "tcp-congestion-control-animation.control.workstation.algorithmTooltip": "TCP congestion control algorithm to use",
  "tcp-congestion-control-animation.control.reset.tooltip": "Reset animation",
  "csma-cd-animation.name": "CSMA/CD",
  "csma-cd-animation.short-description": "Protocol used to control access on a shared medium",
  "csma-cd-animation.description": "This animation shows the effect of signal size, medium length and bandwidth on the CSMA/CD protocol.",
  "csma-cd-animation.credits": "This animation was inspired by a Java Applet originally developed by Daniel Brushteyn, University of Pennsylvania. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Applet author(s) for making their Java Applet publicly available.",
  "csma-cd-animation.control.medium-length": "Medium length (m)",
  "csma-cd-animation.control.signal-size": "Signal size (bits)",
  "csma-cd-animation.control.bandwidth": "Bandwidth (Mbps)",
  "csma-cd-animation.control.apply": "Apply",
  "csma-cd-animation.control.speed": "Animation speed",
  "csma-cd-animation.time": "Time",
  "csma-cd-animation.peer.state.busy-channel": "Busy channel",
  "csma-cd-animation.peer.state.transmitting": "Transmitting...",
  "csma-cd-animation.peer.state.exponential-backoff": "Exponential Backoff",
  "csma-cd-animation.peer.state.exponential-backoff.collisions": "Collisions",
  "dijkstra-algorithm-animation.name": "Dijkstra | Shortest Path",
  "dijkstra-algorithm-animation.short-description": "Dijkstra is an algorithm aiming to find the shortest path from a given start point to all other points",
  "dijkstra-algorithm-animation.description": "The Dijkstra algorithm aims at finding the shortest path from a given start point to all other points, as visualized in the above table. It is fairly simple to understand: First and foremost all nodes are initialized by giving them a distance. The start node will get a distance of 0, all other nodes as distance of INFINITY. Then all nodes the starting node is connected to are filled with the distance to them plus the distance of the current node (starting node). All connected nodes are added to a queue where they wait for processing them. The next node to process is always the most promissing with the lowest distance yet. In case a node already has a distance set but the new one is lower, it is replaced. This process repeats until all nodes are visited.",
  "dijkstra-algorithm-animation.credits": "This animation was inspired by a Java Applet originally developed by Carla Laffra of Pace University. While the animation has been written from scratch and does not contain any source code of the original Java Applet, we would still like to thank the original Applet author(s) for making their Java Applet publicly available.",
  "dijkstra-algorithm-animation.mode.create": "Create",
  "dijkstra-algorithm-animation.mode.normal": "Normal",
  "dijkstra-algorithm-animation.mode.tooltip": "Change the mode of the editor. It can be either 'Create' or 'Normal' mode. In Create mode you are able to create new nodes by clicking on the white space and create arrows between them by dragging from one node to another. In Normal mode you can move nodes around.",
  "dijkstra-algorithm-animation.undo-redo": "Undo / Redo",
  "dijkstra-algorithm-animation.undo.tooltip": "Undo a step",
  "dijkstra-algorithm-animation.redo.tooltip": "Redo a step",
  "dijkstra-algorithm-animation.node-control": "Node control",
  "dijkstra-algorithm-animation.select-node-as-start": "Select node as start",
  "dijkstra-algorithm-animation.select-node-as-start.tooltip": "Select the currently selected node as start node for the Dijkstra algorithm",
  "dijkstra-algorithm-animation.remove-node": "Remove node",
  "dijkstra-algorithm-animation.remove-node.tooltip": "Remove the currently selected node",
  "dijkstra-algorithm-animation.disconnect-node": "Disconnect node",
  "dijkstra-algorithm-animation.disconnect-node.tooltip": "Remove all the connections from this node or to other nodes",
  "dijkstra-algorithm-animation.clear-selection": "Clear selection",
  "dijkstra-algorithm-animation.clear-selection.tooltip": "Clear the current selection",
  "dijkstra-algorithm-animation.dijkstra-control": "Dijkstra",
  "dijkstra-algorithm-animation.start-or-pause.tooltip": "Start or pause the animation",
  "dijkstra-algorithm-animation.next-step.tooltip": "Show the next step of the Dijkstra algorithm",
  "dijkstra-algorithm-animation.reset-algorithm.tooltip": "Reset the Dijkstra algorithm",
  "dijkstra-algorithm-animation.time-to-next-step": "Time to next step",
  "dijkstra-algorithm-animation.time-to-next-step.tooltip": "Adjust how fast the animation is going",
  "dijkstra-algorithm-animation.save-and-restore": "Save & restore",
  "dijkstra-algorithm-animation.save-model.tooltip": "Save the currently shown graph so that you can restore it later. You can even close the browser!",
  "dijkstra-algorithm-animation.restore-model.tooltip": "Restore a previously saved graph",
  "dijkstra-algorithm-animation.clear-model.tooltip": "Delete the current graph",
  "dijkstra-algorithm-animation.table.visited": "Visited",
  "dijkstra-algorithm-animation.table.node": "Node",
  "dijkstra-algorithm-animation.table.shortest-distance-to": "Shortest distance to",
  "dijkstra-algorithm-animation.table.predecessors": "Predecessors",
  "dijkstra-algorithm-animation.dialog.edit-weight": "Edit weight",
  "dijkstra-algorithm-animation.dialog.remove-connection": "Remove connection",
  "dijkstra-algorithm-animation.dialog.remove-connection.security-question": "Are you sure? (Click again)",
  "dijkstra-algorithm-animation.mode": "Mode",
  "dijkstra-algorithm-animation.help": "Help",
  "dijkstra-algorithm-animation.help-label": "Use the `Ctrl` key or click on the `Mode` button on the right side to switch into 'Create' mode where you can click here to add new nodes and drag arrows from one node to another. In 'Normal' mode you can move nodes and select them in order to apply the actions listed on the right side. In order to modify connection weights, just click on them in 'Normal' mode. Once you are done modelling your graph you can click on 'Play' to start the animation or just use the Arrow button to proceeed one step after another.",
  "csma-ca-animation.name": "CSMA/CA",
  "csma-ca-animation.short-description": "Carrier Sense Multiple Access/Collision Avoidance is trying to avoid collisions when multiple network devices are communicating over the same medium",
  "csma-ca-animation.description": "In this situation we have three clients (A, B and C) trying to communicate with the access point X. Try to click on a node (A, B or C) to emit a signal. CSMA/CA with RTS/CTS trys to avoid signal collisions by first sending a short RTS (Request to send) signal followed by a CTS (Clear to send) from the access point. All other clients in range of the access point are notified by the CTS the anticipated duration the data will take to be sent and thus depict the medium as allocated for that duration (NAV). You can move the nodes around to change the behavior. Note that for simplicity reasons the assumption is made that collisions (packet loss by interference) occur inside the CS-range.",
  "csma-ca-animation.credits": "This animation was inspired by another animation (See https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/csma-ca-with-hidden/index.html). While the animation has been written from scratch and does not contain any source code of the original animation, we would still like to thank the original Applet author(s) for making it publicly available.",
  "csma-ca-animation.status-bar-label": "Status",
  "csma-ca-animation.value-bar-label": "Client",
  "csma-ca-animation.access-point": "Access Point",
  "csma-ca-animation.click-here-tooltip": "Click here!",
  "csma-ca-animation.signal-range-tooltip": "Signal range",
  "csma-ca-animation.legend.rts": "RTS (Request to send)",
  "csma-ca-animation.legend.cts": "CTS (Clear to send)",
  "csma-ca-animation.legend.data": "Data",
  "csma-ca-animation.legend.ack": "ACK",
  "csma-ca-animation.legend.backoff": "Backoff",
  "csma-ca-animation.legend.free": "Free medium",
  "csma-ca-animation.legend.busy": "Busy medium",
  "csma-ca-animation.legend.nav": "NAV (Network allocation vector)",
  "csma-ca-animation.settings": "Settings",
  "csma-ca-animation.label.rts-cts": "RTS/CTS",
  "csma-ca-animation.animation-speed": "Animation speed",
  "editor.edit": "Edit",
  "editor.preview": "Preview"
}
