{
	"title": "Animationen",
	"overview": "Übersicht",
	"packet-transmission.name": "Packet Übertragung",
	"languageSelectionLabel": "Sprache auswählen",
	"moreAnimationsComing": "Weitere Animationen folgen",
	"munichUniversityName": "Hochschule München",
	"copyright": "Copyright",
	"description": "Beschreibung",
	"settings": "Einstellungen",
	"back": "Zurück",
	"fullscreen": "Vollbild",
	"packetTransmission.start": "Start",
	"packetTransmission.reset": "Zurücksetzen",
	"packetTransmission.sender": "Sender",
	"packetTransmission.receiver": "Empfänger",
	"packetTransmission.propagationSpeed": "Ausbreitungsgeschwindigkeit",
	"packetTransmission.length": "Leitungslänge",
	"packetTransmission.size": "Packetgröße",
	"packetTransmission.rate": "Rate",
	"packetTransmission.description": "Diese einfache Animation zeigt eines der fundamentalsten Konzepte von Netzwerke I: Übertragungsverzögerung im Verhältnis zur Ausbreitungsverzögerung. Das Konzept wird in Kapitel I genauer beleuchtet. Setzen Sie die Länge der Verbindung zwischen Sender und Empfänger, die Packet Größe und die Übertragungsgeschwindigkeit. Bei Druck auf Start können Sie das Packet beobachten, wie es von Sender zu Empfänger gesendet wird.",
	"reliable-transmission-animation.name": "Zuverlässige Übertragung",
	"reliable-transmission-animation.sender": "Sender",
	"reliable-transmission-animation.receiver": "Empfänger",
	"reliable-transmission-animation.send-next-packet": "Paket senden",
	"reliable-transmission-animation.protocol.stop-and-wait": "Stop-And-Wait",
	"reliable-transmission-animation.protocol.stop-and-wait.description": "Das Stop-And-Wait stellt das einfachste ARQ-Protokoll (Automatic Repeat Request) dar. Bei dieser Art der zuverlässigen Datenübertragung wird immer nur jeweils ein Paket gesendet und auf die Antwort (ACK Paket) des Empfängers gewartet. Kommt innerhalb eines bestimmten Zeitintevalls (Timeout) keine Antwort vom Empfänger wird das letzte Paket erneut gesendet. Dadurch ist eine zuverlässige Datenübertragung gewährleistet, wenn auch eine sehr langsame, da die meiste Zeit gewartet wird.",
	"reliable-transmission-animation.protocol.selective-repeat": "Selective Repeat",
	"reliable-transmission-animation.protocol.selective-repeat.description": "Im Vergleich zum Go-Back-N Protokoll bedarf das Selective-Repeat Protokoll deutlich mehr Speicherplatz, da sowohl Sender als auch Empfänger ein Fenster haben, also Packete zwischenspeichern. Falls Packete am Empfänger in falscher Reihenfolge ankommen, werden diese einfach gespeichert, bis die vorhergehenden Pakete ankommen und dann in-order wieder eine Schicht weiter hochgereicht. Damit das funktioniert muss für jedes Paket ein eigener Timer am Sender existieren um bei Timeout genau das fehlende Paket erneut zu senden. Dadurch ist eine hohe Senderate gewährleistet, wenn auch zum Preis von mehr Speicher. Bei einer fehleranfälligen Verbindung ist diese Methode jedoch Go-Back-N vorzuziehen, da jeweils nur die betroffenen Pakete erneut gesendet werden müssen.",
	"reliable-transmission-animation.protocol.go-back-n": "Go-Back-N",
	"reliable-transmission-animation.protocol.go-back-n.description": "Das Go-Back-N Protokoll ist ein weiteres Protokoll zur zuverlässigen Datenübertragung über einen unzuverlässigen Kanal (Netzwerk Schicht). Im Gegensatz zum Stop-And-Wait Protokoll wird hier ein Sendefenster beim Sender angenommen. Solange das Sendefenster nicht voll ist, können Pakete gesendet werden. Erst wenn das zuerst gesendete Paket im Fenster vom Empfänger bestätigt wird, wird das Fenster weiterbewegt. Jedes ACK des Empfängers bestätigt alle bereits empfangenen Pakete (Kumulatives ACK). Sollte ein Paket nicht beim Empfänger ankommen, wird ein ACK gesendet, welches das zuletzt empfangene Paket bestätigt. Nach einem Timeout am Sender werden alle unbestätigten Pakete erneut zum Empfänger gesendet. Bei dieser Art der Datenübertragung erreicht man eine deutlich höhrere Senderate, als bei Stop-And-Wait, allerdings müssen teilweise viele Pakete erneut gesendet werden, da der Empfänger die außerhalb der Reihenfolge empfangenen Pakete verwirft.",
	"reliable-transmission-animation.transmission-duration": "Übertragungs Dauer",
	"reliable-transmission-animation.window-size": "Fenster Größe",
	"reliable-transmission-animation.protocol-messages": "Protokoll Log",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.send-packet": "Sender sendet PKT_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet": "Sender sendet PKT_%i erneut",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-packet": "Empfänger erhält PKT_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet": "Empfänger erhält PKT_%i aber hatte es schon",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack": "Sender empfängt ACK_%i",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup": "Sender empfängt ACK_%i aber hatte es schon"
}