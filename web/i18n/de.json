{
	"title": "Animationen",
	"overview": "Übersicht",
	"user-management": "Benutzer",
	"packet-transmission.name": "Packet Übertragung",
	"languageSelectionLabel": "Sprache auswählen",
	"moreAnimationsComing": "Weitere Animationen folgen",
	"munichUniversityName": "Hochschule München",
	"copyright": "Copyright",
	"description": "Beschreibung",
	"settings": "Einstellungen",
	"back": "Zurück",
	"goto-animation": "Ansehen",
	"fullscreen": "Vollbild",
	"logged-in-as": "Angemeldet als",
	"animation-not-visible": "Diese Animation ist momentan nicht sichtbar.",
	"login.title": "Anmeldung",
	"login.subtitle": "... zur Administration",
	"login.error": "Die Anmeldung ist fehlgeschlagen.",
	"login.close": "Schließen",
	"login.submit": "Anmelden",
	"login.username": "Benutzername",
	"login.password": "Passwort",
	"packetTransmission.start": "Start",
	"packetTransmission.reset": "Zurücksetzen",
	"packetTransmission.sender": "Sender",
	"packetTransmission.receiver": "Empfänger",
	"packetTransmission.propagationSpeed": "Ausbreitungsgeschwindigkeit",
	"packetTransmission.length": "Leitungslänge",
	"packetTransmission.size": "Packetgröße",
	"packetTransmission.rate": "Rate",
	"packetTransmission.description": "Diese einfache Animation zeigt eines der fundamentalsten Konzepte von Netzwerke I: Übertragungsverzögerung im Verhältnis zur Ausbreitungsverzögerung. Das Konzept wird in Kapitel I genauer beleuchtet. Setzen Sie die Länge der Verbindung zwischen Sender und Empfänger, die Packet Größe und die Übertragungsgeschwindigkeit. Bei Druck auf Start können Sie das Packet beobachten, wie es von Sender zu Empfänger gesendet wird.",
	"packetTransmission.credits": "Die Gestaltung dieser Animation wurde von einem Java-Applet inspiriert, welches ursprünglich von David Grangier, Institut Eurecom, Frankreich, entwickelt wurde. Obwohl die Animation von Grund auf neu geschrieben wurde und keinen Quellcode des ursprünglichen Java-Applets enthält, möchten wir uns dennoch bei den ursprünglichen Java-Applet-Autoren dafür bedanken, dass sie ihr Java-Applet öffentlich zugänglich gemacht haben.",
	"reliable-transmission-animation.name": "Zuverlässige Übertragung",
	"reliable-transmission-animation.sender": "Sender",
	"reliable-transmission-animation.receiver": "Empfänger",
	"reliable-transmission-animation.send-next-packet": "Paket senden",
	"reliable-transmission-animation.timer": "Timer",
	"reliable-transmission-animation.enable-custom-timer": "Anderer Timer?",
	"reliable-transmission-animation.protocol.stop-and-wait": "Stop-And-Wait",
	"reliable-transmission-animation.protocol.stop-and-wait.description": "Das Stop-And-Wait stellt das einfachste ARQ-Protokoll (Automatic Repeat Request) dar. Bei dieser Art der zuverlässigen Datenübertragung wird immer nur jeweils ein Paket gesendet und auf die Bestätigung (Acknowledgement, ACK Paket) des Empfängers gewartet. Kommt innerhalb eines bestimmten Zeitintevalls (Timeout) keine Antwort vom Empfänger, wird das letzte Paket erneut gesendet. Dadurch ist eine zuverlässige Datenübertragung gewährleistet.",
	"reliable-transmission-animation.protocol.selective-repeat": "Selective Repeat",
	"reliable-transmission-animation.protocol.selective-repeat.description": "Im Vergleich zum Go-Back-N Protokoll bedarf das Selective-Repeat Protokoll deutlich mehr Speicherplatz, da sowohl Sender als auch Empfänger ein Fenster haben, also Packete zwischenspeichern. Falls Packete am Empfänger in falscher Reihenfolge ankommen, werden diese einfach zwischengespeichert, bis die vorhergehenden Pakete ankommen und dann in-order wieder eine Schicht weiter hochgereicht. Damit dies funktioniert existiert für jedes Paket ein eigener Timer am Sender, um bei Timeout genau das fehlende Paket erneut zu senden. Dadurch ist eine hohe Senderate gewährleistet, wenn auch zum Preis von mehr Speicher. Bei einer fehleranfälligen Verbindung ist diese Methode jedoch Go-Back-N vorzuziehen, da jeweils nur die betroffenen Pakete erneut gesendet werden müssen.",
	"reliable-transmission-animation.protocol.go-back-n": "Go-Back-N",
	"reliable-transmission-animation.protocol.go-back-n.cumulative-ack": "Kumulatives ACK",
	"reliable-transmission-animation.protocol.specific-settings": "Protokoll spezifische Einstellungen",
	"reliable-transmission-animation.protocol.go-back-n.description": "Das Go-Back-N Protokoll ist ein weiteres Protokoll zur zuverlässigen Datenübertragung über einen unzuverlässigen Kanal. Im Gegensatz zum Stop-And-Wait Protokoll wird hier ein Sendefenster für mehr als ein Paket beim Sender angenommen. Solange das Sendefenster nicht voll ist, können Pakete gesendet werden. Erst wenn das zuerst gesendete Paket im Fenster vom Empfänger bestätigt wird, wird das Fenster weiterbewegt. Jedes ACK des Empfängers bestätigt alle bereits empfangenen Pakete (kumulatives ACK). Sollte ein Paket mit einer zu hohen Sequenznummer beim Empfänger ankommen (d.h. ein Paket davor verloren gegangen sein), wird ein ACK gesendet, welches das zuletzt empfangene Paket bestätigt. Nach einem Timeout am Sender werden alle unbestätigten Pakete erneut zum Empfänger gesendet. Bei dieser Art der Datenübertragung erreicht man eine deutlich höhrere Senderate, als bei Stop-And-Wait, allerdings müssen teilweise viele Pakete erneut gesendet werden, da der Empfänger die außerhalb der Reihenfolge empfangenen Pakete verwirft.",
	"reliable-transmission-animation.transmission-duration": "Übertragungs Dauer",
	"reliable-transmission-animation.window-size": "Fenster Größe",
	"reliable-transmission-animation.protocol-messages": "Protokoll Log",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.send-packet": "Sender sendet PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet.1": "Sender sendet PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.resend-packet.2": " erneut",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-packet": "Empfänger erhält PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet.1": "Empfänger erhält PKT_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.receiver-received-dup-packet.2": " aber hatte es schon",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack": "Sender empfängt ACK_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup.1": "Sender empfängt ACK_",
	"reliable-transmission-animation.protocol.log-messages.stop-and-wait.received-ack-dup.2": " aber hatte es schon",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.retransmitt.1": "Sender sendet alle ",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.retransmitt.2": " ausstehenden Pakete erneut nach einem Timeout",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-out-of-order.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-out-of-order.2": " wurde außerhalb der Reihenfolge empfangen. Kumulatives ACK für das letzte in Reihenfolge empfangene Paket gesendet",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-in-order.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.received-in-order.2": " in Reihenfolge empfangen. ACK gesendet",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.reset-timeout.1": "Timeout zurückgesetzt, da ACK_",
	"reliable-transmission-animation.protocol.log-messages.go-back-n.reset-timeout.2": " empfangen",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt-dup.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt-dup.2": " wurde bereits empfangen. ACK erneut senden",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt.1": "PKT_",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.receiver-received-pkt.2": " wurde empfangen. ACK senden",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack-dup.1": "Sender empfängt ACK_",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack-dup.2": " welches bereits empfangen wurde",
	"reliable-transmission-animation.protocol.log-messages.selective-repeat.sender-received-ack": "Sender empfängt ACK_",
	"reliable-transmission-animation.credits": "Die Gestaltung dieser Animation wurde von einem Java-Applet inspiriert, welches ursprünglich von M. Shatley und C. Hoffman (Betreuer: Prof. P. Amer), Univ. of Delaware, entwickelt wurde. Obwohl die Animation von Grund auf neu geschrieben wurde und keinen Quellcode des ursprünglichen Java-Applets enthält, möchten wir uns dennoch bei den ursprünglichen Java-Applet-Autoren dafür bedanken, dass sie ihr Java-Applet öffentlich zugänglich gemacht haben.",
	"queue-simulation-animation.name": "Warteschlangen Simulation",
	"queue-simulation-animation.packet-per-second": "Packete / s",
	"queue-simulation-animation.emission-rate": "Emissions Rate",
	"queue-simulation-animation.transmission-rate": "Verarbeitungs Rate",
	"queue-simulation-animation.queue-length": "Warteschlangen Länge",
	"queue-simulation-animation.description": "Ein Paket wird in einem Router verarbeitet (z.B. werden die Header ausgewertet und gegebenenfalls modifiziert) und dann auf einem der Ports weitergesendet. Die hierfür benötigten Zeiten werden Verarbeitungsverzögerung (processing delay) und Übertragungsverzögerung (transmission delay) genannt. Der Router kann nicht kontrollieren, mit welcher Rate Pakete bei ihm eingehen. Somit kann es dazu kommen, dass er ein eingehendes Paket nicht sofort verarbeiten kann, weil er noch mit der Verarbeitung eines vorhergehenden Paketes beschäftigt ist. Daher benötigt er eine Warteschlange (queue) in welcher Pakete zwischengespeichert werden können. Diese Wartezeit in der Warteschlange ist die sogenannte Warteschlangenverzögerung (queueing delay). Falls die Warteschlange voll ist werden ankommende Pakete verworfen - dies ist erlaubt, da das Internet nach dem best effort Prinzip arbeitet.",
	"queue-simulation-animation.incoming": "Eingehend",
	"queue-simulation-animation.outgoing": "Ausgehend",
	"queue-simulation-animation.queue-of-router": "Warteschlange des Routers",
	"queue-simulation-animation.dropped-packets": "Ignorierte Packete",
	"queue-simulation-animation.time-passed": "Vergangene Zeit",
	"queue-simulation-animation.credits": "Die Gestaltung dieser Animation wurde von einem Java-Applet inspiriert, welches ursprünglich von David Grangier, Institut Eurecom, Frankreich, entwickelt wurde. Obwohl die Animation von Grund auf neu geschrieben wurde und keinen Quellcode des ursprünglichen Java-Applets enthält, möchten wir uns dennoch bei den ursprünglichen Java-Applet-Autoren dafür bedanken, dass sie ihr Java-Applet öffentlich zugänglich gemacht haben.",
	"http-delay-animation.name": "Http Verzögerung",
	"http-delay-animation.connection-step.0": "TCP Verbindungsaufbau",
	"http-delay-animation.connection-step.1": "HTML Seiten Anfrage",
	"http-delay-animation.connection-step.2": "Objekt Anfrage",
	"http-delay-animation.description": "Diese Animation zeigt die HTTP Verzögerung, welche zum Beispiel beim Aufruf dieser Webseite stattfindet. Sie können die Anzahl der Objekte, die die Seite anfrägt setzen, wie auch die Anzahl der parallelen Verbindungen, ob die Verbindung persistent ist und ob Pipelining benutzt werden soll.",
	"http-delay-animation.info": "Ändern Sie die Einstellungen, danach klicken Sie auf \"Start\"",
	"http-delay-animation.persistent-connection": "Persistente Verbindung",
	"http-delay-animation.pipelining": "Pipelining",
	"http-delay-animation.objects-being-transmitted": "Zu übertragende Objekte",
	"http-delay-animation.parallel-connections": "Parallele Verbindungen",
	"http-delay-animation.transmission-delay": "Übertragungs Verzögerung",
	"http-delay-animation.enable-animation": "Animieren?",
	"http-delay-animation.animation-speed": "Animations Geschwindigkeit (Gesamtverzögerung)",
	"http-delay-animation.start": "Start",
	"http-delay-animation.rtt-help": "Round trip time der Animation nachdem Sie auf \"Start\" geklickt haben",
	"http-delay-animation.credits": "Die Gestaltung dieser Animation wurde von einem Java-Applet inspiriert, welches ursprünglich von Pratima Akkunoor/Martin Reisslein, Arizona State University, USA, entwickelt wurde. Obwohl die Animation von Grund auf neu geschrieben wurde und keinen Quellcode des ursprünglichen Java-Applets enthält, möchten wir uns dennoch bei den ursprünglichen Java-Applet-Autoren dafür bedanken, dass sie ihr Java-Applet öffentlich zugänglich gemacht haben."
}